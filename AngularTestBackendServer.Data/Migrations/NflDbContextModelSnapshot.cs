// <auto-generated />
using System;
using AngularTestBackendServer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AngularTestBackendServer.Data.Migrations
{
    [DbContext(typeof(NflDbContext))]
    partial class NflDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AngularTestBackendServer.Data.Entities.ConferenceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Conferences", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "NFC"
                        },
                        new
                        {
                            Id = 2,
                            Name = "AFC"
                        });
                });

            modelBuilder.Entity("AngularTestBackendServer.Data.Entities.DivisionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Divisions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "NFC West"
                        },
                        new
                        {
                            Id = 2,
                            Name = "NFC East"
                        },
                        new
                        {
                            Id = 3,
                            Name = "NFC South"
                        },
                        new
                        {
                            Id = 4,
                            Name = "NFC North"
                        },
                        new
                        {
                            Id = 5,
                            Name = "AFC West"
                        },
                        new
                        {
                            Id = 6,
                            Name = "AFC East"
                        },
                        new
                        {
                            Id = 7,
                            Name = "AFC South"
                        },
                        new
                        {
                            Id = 8,
                            Name = "AFC North"
                        },
                        new
                        {
                            Id = 9,
                            Name = "NFC Central"
                        },
                        new
                        {
                            Id = 10,
                            Name = "AFC Central"
                        });
                });

            modelBuilder.Entity("AngularTestBackendServer.Data.Entities.GameEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("int");

                    b.Property<int?>("AwayTeamScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("GameDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int");

                    b.Property<int?>("HomeTeamScore")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("StadiumId")
                        .HasColumnType("int");

                    b.Property<bool>("WasStadiumNeutral")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("WeatherHumidity")
                        .HasColumnType("int");

                    b.Property<int?>("WeatherTemperature")
                        .HasColumnType("int");

                    b.Property<int?>("WeatherWindMph")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("StadiumId");

                    b.ToTable("Games", (string)null);
                });

            modelBuilder.Entity("AngularTestBackendServer.Data.Entities.ScheduleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsPlayoffGame")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("Week")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Schedules", (string)null);
                });

            modelBuilder.Entity("AngularTestBackendServer.Data.Entities.SeasonEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Seasons", (string)null);
                });

            modelBuilder.Entity("AngularTestBackendServer.Data.Entities.StadiumEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("StadiumCloseYear")
                        .HasColumnType("int");

                    b.Property<int?>("StadiumOpenYear")
                        .HasColumnType("int");

                    b.Property<int?>("StadiumTypeId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Stadiums", (string)null);
                });

            modelBuilder.Entity("AngularTestBackendServer.Data.Entities.StadiumTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("StadiumTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Name = "Unknown"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Outdoor"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Indoor"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Retractable"
                        });
                });

            modelBuilder.Entity("AngularTestBackendServer.Data.Entities.TeamEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("ConferenceId")
                        .HasColumnType("int");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Teams", (string)null);
                });

            modelBuilder.Entity("AngularTestBackendServer.Data.Entities.GameEntity", b =>
                {
                    b.HasOne("AngularTestBackendServer.Data.Entities.TeamEntity", "AwayTeam")
                        .WithMany("AwayGames")
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AngularTestBackendServer.Data.Entities.TeamEntity", "HomeTeam")
                        .WithMany("HomeGames")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AngularTestBackendServer.Data.Entities.ScheduleEntity", "Schedule")
                        .WithMany("WeeklyGames")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AngularTestBackendServer.Data.Entities.StadiumEntity", "Stadium")
                        .WithMany("Games")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");

                    b.Navigation("Schedule");

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("AngularTestBackendServer.Data.Entities.ScheduleEntity", b =>
                {
                    b.HasOne("AngularTestBackendServer.Data.Entities.SeasonEntity", "Season")
                        .WithMany("WeeklySchedules")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("AngularTestBackendServer.Data.Entities.ScheduleEntity", b =>
                {
                    b.Navigation("WeeklyGames");
                });

            modelBuilder.Entity("AngularTestBackendServer.Data.Entities.SeasonEntity", b =>
                {
                    b.Navigation("WeeklySchedules");
                });

            modelBuilder.Entity("AngularTestBackendServer.Data.Entities.StadiumEntity", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("AngularTestBackendServer.Data.Entities.TeamEntity", b =>
                {
                    b.Navigation("AwayGames");

                    b.Navigation("HomeGames");
                });
#pragma warning restore 612, 618
        }
    }
}
